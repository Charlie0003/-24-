from itertools import permutations, product


def calc_24(nums):
    results = set()
    for a, b, c, d in permutations(nums):
        # 1. 三个数的运算
        for op1, op2, op3 in product(['+', '-', '*', '/'], repeat=3):
            try:
                res1 = eval(f"(({a} {op1} {b}) {op2} {c}) {op3} {d}")
                if res1 == 24:
                    results.add(f"(({a} {op1} {b}) {op2} {c}) {op3} {d}")
            except:
                pass

            try:
                res2 = eval(f"({a} {op1} {b}) {op2} ({c} {op3} {d})")
                if res2 == 24:
                    results.add(f"({a} {op1} {b}) {op2} ({c} {op3} {d})")
            except:
                pass

        # 2. 两个数的运算
        for op1, op2, op3 in product(['+', '-', '*', '/'], repeat=3):
            try:
                res3 = eval(f"{a} {op1} (({b} {op2} {c}) {op3} {d})")
                if res3 == 24:
                    results.add(f"{a} {op1} (({b} {op2} {c}) {op3} {d})")
            except:
                pass

            try:
                res4 = eval(f"({a} {op1} {b}) {op2} ({c} {op3} {d})")
                if res4 == 24:
                    results.add(f"({a} {op1} {b}) {op2} ({c} {op3} {d})")
            except:
                pass

            try:
                res5 = eval(f"({a} {op1} {b}) {op2} {c} {op3} {d}")
                if res5 == 24:
                    results.add(f"({a} {op1} {b}) {op2} {c} {op3} {d}")
            except:
                pass

            try:
                res6 = eval(f"{a} {op1} ({b} {op2} ({c} {op3} {d}))")
                if res6 == 24:
                    results.add(f"{a} {op1} ({b} {op2} ({c} {op3} {d}))")
            except:
                pass

    return results


# 测试
# print(calc_24([1, 2, 3, 4]))
# {'(1 + 2) * (3 + 4)', '2 * (1 + 3 + 4 + (-1))', '2 * ((1 + 3) * 4 - 2)', '1 + 3 + (4 * 2 * 1)', '1 + (4 * (2 + 3) - 3)', '4 * (2 + 1 + 3) / 4', '2 * (1 + 4) * (3 - 2)', '4 * (2 + 1) - 3', '1 + (2 + 3) * 4 - 4', '4 * (3 - 1) + 2', '(3 - 1) * 4 + (2 + 1)', '(4 / 4 + 2) * (1 + 3)', '(4 / 4 + 1) * (3 + 2)', '(3 - 1) * (4 + 2) - 1', '4 * ((3 - 1) * 2 - 4)', '2 * (1 + 4 + (-3)) * 3', '2 * (1 + 4 - 3) * 3', '4 * (3 - 1) - (4 / 2)', '4 * (3 - 1) - 2', '4 * (3 - 2) * (1 + 2)', '2 * (1 + 3) * 4 - 8', '(4 / (1 - 3) - 2) * 1 * 3 * 4', '4 * ((1 + 3) * 2 - 4)', '1 * 2 * 3 * 4', '4 * (3 - 1) / (4 / 2)', '(2 + 1) * (4 + 3) / 4'}
# print(calc_24([2, 3, 4, 5]))
# {'(3 - (5 - 4)) * 2 * 4', '3 * (4 + 2) / (5 - 1)', '(4 / (5 - 3) + 2) * 3 * 5', '4 * (5 - 3) * (2 + 3)', '4 * (5 - 3) - 2 - (-1)', '4 * (5 - 2) - (3 / 1)', '4 * (5 - 2) / (3 - 1)', '4 * (5 - 3) * 2 - 1', '2 * (5 + 3) - (4 + 3)', '2 * (5 + 3) - 4 - 3', '2 * (5 + 3) * (4 - 2)', '3 * (5 - 4) * (2 + 4)', '2 * (5 + 3 + (-4)) * 4', '2 * (5 + 3 - 4) * 4', '5 - (3 - (4 / 2)) * 5', '5 * (4 - 2) * (3 - 1)', '5 * (4 + 2) / (3 - 1)', '5 * (4 - 2) * 3 - 1', '5 * ((4 + 3) * 2 - 3)', '4 * (5 - 2) - 3 * 1', '4 * (5 - 3) * (1 + 2)', '4 * (5 - 3) - 1 - (-2)', '4 * (5 - 2) + 3 * 1', '4 * (5 - 3) * 2 + 1', '4 * (5 - 3) + 1 - (-2)', '4 * (5 - 2) * (3 - 1)', '4 * (5 - 3) + 2 - 1', '4 * (5 - 3) - 1 - 2', '4 * (5 - 2) + 1 * 3', '4 * (5 - 3) - (2 / 1)', '4 * (5 - 2) - 1 - 3', '4 * (5 - 2) * 3 / 1', '4 * (5 - 2) + 1 + (-3)'}
p = calc_24([2,4,11,12])
print(p, len(p))
